lda1 <- lda(Direction ~ Lag1 + Lag2, data = smarket, subset = train)
lda1
lda1 <- lda(Direction ~ Lag1 + Lag2, data = smarket, subset = train)
lda1
plot(lda.fit)
lda1 <- lda(Direction ~ Lag1 + Lag2, data = smarket, subset = train)
lda1
plot(lda1)
lda1 <- lda(Direction ~ Lag1 + Lag2, data = smarket, subset = train)
lda1
plot(lda1)
plot(lda1)
temp_data <- smarket[year]
plot(lda1)
temp_data <- smarket[Year]
plot(lda1)
temp_data <- smarket[year]
plot(lda1)
temp_data <- smarket[train]
plot(lda1)
temp_data <- smarket[train,]
nrow(temp_data)
plot(lda1)
temp_data <- smarket[train,]
group1<- temp_data[temp_data$Direction == 'Up']
str(temp_data)
plot(lda1)
temp_data <- smarket[train,]
group1<- temp_data[temp_data$Direction == 'Up',]
group2 <- temp_data[temp_data$Direction == 'Down',]
prob_lda1 <- -0.642 * group1$Lag1 - 0.513 * group1$Lag2
prob_lda2 <- -0.642 * group2$Lag1 - 0.513 * group2$Lag2
plot1 <- ggplot(data.frame(prob_lda1),aes(prob_lda1))+
geom_histogram()
temp_data <- smarket[train,]
group1<- temp_data[temp_data$Direction == 'Up',]
group2 <- temp_data[temp_data$Direction == 'Down',]
prob_lda1 <- -0.642 * group1$Lag1 - 0.513 * group1$Lag2
prob_lda2 <- -0.642 * group2$Lag1 - 0.513 * group2$Lag2
plot1 <- ggplot(data.frame(prob_lda1),aes(prob_lda1))+
geom_histogram()
temp_data <- smarket[train,]
group1<- temp_data[temp_data$Direction == 'Up',]
group2 <- temp_data[temp_data$Direction == 'Down',]
prob_lda1 <- -0.642 * group1$Lag1 - 0.513 * group1$Lag2
prob_lda2 <- -0.642 * group2$Lag1 - 0.513 * group2$Lag2
plot1 <- ggplot(data.frame(prob_lda1),aes(prob_lda1))+
geom_histogram()
plot1
plot(lda1)
temp_data <- smarket[train,]
group1<- temp_data[temp_data$Direction == 'Up',]
group2 <- temp_data[temp_data$Direction == 'Down',]
prob_lda1 <- -0.642 * group1$Lag1 - 0.513 * group1$Lag2
prob_lda2 <- -0.642 * group2$Lag1 - 0.513 * group2$Lag2
plot1 <- ggplot(data.frame(prob_lda1),aes(prob_lda1))+
geom_histogram(aes(y = ..density..))
plot1
install.packages("gridExtra")
install.packages("gridExtra")
temp_data <- smarket[train,]
group1<- temp_data[temp_data$Direction == 'Up',]
group2 <- temp_data[temp_data$Direction == 'Down',]
prob_lda1 <- -0.642 * group1$Lag1 - 0.513 * group1$Lag2
prob_lda2 <- -0.642 * group2$Lag1 - 0.513 * group2$Lag2
plot1 <- ggplot(data.frame(prob_lda1),aes(prob_lda1))+
geom_histogram(aes(y = ..density..)) +
xlab("Group: Up")
plot2 <- ggplot(data.frame(prob_lda2), aes(prob_lda2)) +
geom_histogram(aes(y = ..density..)) +
xlab("Group: Down")
gridExtra::grid.arrange(plot1,plot2, ncol = 1)
temp_data <- smarket[train,]
group1<- temp_data[temp_data$Direction == 'Up',]
group2 <- temp_data[temp_data$Direction == 'Down',]
prob_lda1 <- -0.642 * group1$Lag1 - 0.513 * group1$Lag2
prob_lda2 <- -0.642 * group2$Lag1 - 0.513 * group2$Lag2
plot1 <- ggplot(data.frame(prob_lda1),aes(prob_lda1))+
geom_histogram(aes(y = ..density..)) +
xlab("Group: Up")
plot2 <- ggplot(data.frame(prob_lda2), aes(prob_lda2)) +
geom_histogram(aes(y = ..density..)) +
xlab("Group: Down")
gridExtra::grid.arrange(plot2,plot1, ncol = 1)
pred_lda <- predict(lda1, smarket.2005)
pred_lda <- predict(lda1, smarket.2005)
class_lda <- pred_lda$class
table(class_lda, Direction.2005)
Values4 <- c(round(106/(106 + 35),4)*100, round(35/(35 + 76),4)*100, round(106/(106 + 76),4)*100, round((106 + 35)/nrow(smarket.2005),4)*100)
Metrics4 <- c('Sensitivity','Specificity','Precision','Accuracy')
kableExtra::kable(data.frame(Metrics = Metrics4, Values = Values4))
install.packages('pROC')
pred_lda$posterior
pred_lda$posterior[1:20,1]
pred_lda$posterior[1:20,1]
class_lda[1:20]
pred_lda$posterior[1:20,]
class_lda[1:20]
pROC(lda1,smarket.2005)
pROC::roc(lda1,smarket.2005)
pROC::roc(smarket.2005,pred_lda, plot = TRUE)
pROC::roc(smarket.2005$Direction,pred_lda, plot = TRUE)
pROC::roc(as.numeric(smarket.2005$Direction,pred_lda), plot = TRUE)
pROC::roc(as.numeric(smarket.2005$Direction,pred_lda), plot = TRUE)
pROC::roc(as.numeric(smarket.2005$Direction),pred_lda, plot = TRUE)
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
pROC::roc(true_dir,pred_lda, plot = TRUE)
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
true_dir[1:10]
pROC::roc(true_dir,pred_lda, plot = TRUE)
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
true_dir[1:10]
#pROC::roc(true_dir,pred_lda, plot = TRUE)
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
smarket.2005$Direction[1:10]
true_dir[1:10]
#pROC::roc(true_dir,pred_lda, plot = TRUE)
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
pROC::roc(true_dir,pred_lda, plot = TRUE)
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
#pROC::roc(true_dir,pred_lda, plot = TRUE)
head(pred_lda)
pROC::roc(smarket$Direction,class, plot = TRUE)
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
pROC::roc(smarket$Direction,class_lda, plot = TRUE)
str(class_lda)
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
pred_dir_lda <- rep(1, nrow(smart.2005))
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
pred_dir_lda <- rep(1, nrow(smarket.2005))
pred_dir_lda[smarket.2005$Direction == 'Down'] = 1
pROC::roc(true_dir, pred_dir_lda plot = TRUE)
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
pred_dir_lda <- rep(1, nrow(smarket.2005))
pred_dir_lda[smarket.2005$Direction == 'Down'] = 1
pROC::roc(true_dir, pred_dir_lda, plot = TRUE)
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
pred_dir_lda <- rep(1, nrow(smarket.2005))
pred_dir_lda[smarket.2005$Direction == 'Down'] = 1
par(pty = 's')
pROC::roc(true_dir, pred_dir_lda, plot = TRUE)
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
pred_dir_lda <- rep(1, nrow(smarket.2005))
pred_dir_lda[smarket.2005$Direction == 'Down'] = 1
par(pty = 's')
pROC::roc(true_dir, pred_dir_lda, plot = TRUE, legacy.axes = TRUE)
qda_fit <- qda(Direction ~ Lag1 + Lag2, data = smarket, subset = train)
qda_fit
pred_qda <- predict(qda_fit, smarket.2005)
pred_qda <- predict(qda_fit, smarket.2005)
class_qda <- pred_qda$class
table(class.qda, Direction.2005)
pred_qda <- predict(qda_fit, smarket.2005)
class_qda <- pred_qda$class
table(class_qda, Direction.2005)
Values5 <- c(round(121/(121 + 20),4)*100, round(30/(30 + 81),4)*100, round(121/(121 + 81),4)*100, round((121 + 30)/nrow(smarket.2005),4)*100)
Metrics4 <- c('Sensitivity','Specificity','Precision','Accuracy')
kableExtra::kable(data.frame(Metrics = Metrics4, Values = Values5))
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
pred_dir_lda <- rep(1, nrow(smarket.2005))
pred_dir_lda[class_lda == 'Down'] = 1
par(pty = 's')
pROC::roc(true_dir, pred_dir_lda, plot = TRUE, legacy.axes = TRUE)
class_lda
class_lda[1:10]
class_lda[1:15]
pred_dir_lda
true_dir <- rep(1,nrow(smarket.2005))
true_dir[smarket.2005$Direction == 'Down'] = 0
pred_dir_lda <- rep(1, nrow(smarket.2005))
pred_dir_lda[class_lda == 'Down'] = 0
par(pty = 's')
pROC::roc(true_dir, pred_dir_lda, plot = TRUE, legacy.axes = TRUE)
pred_dir_qda <- rep(1, nrow(smarket.2005))
pred_dir_qda[class_qda == 'Down'] = 0
par(pty = 's')
pROC::roc(true_dir, pred_dir_qda, plot = TRUE, legacy.axes = TRUE)
install.packages("class")
set.seed(1)
knn_pred <- knn(train_X,test_X,train_Direction, K = 1)
set.seed(1)
class:knn_pred <- knn(train_X,test_X,train_Direction, K = 1)
set.seed(1)
class::knn_pred <- knn(train_X,test_X,train_Direction, K = 1)
set.seed(1)
knn_pred <- class::knn(train_X,test_X,train_Direction, K = 1)
set.seed(1)
knn_pred <- class::knn(train_X,test_X,train_Direction, k = 1)
# Input 1
train_X <- cbind(smarket$Lag1,smarket$Lag2)[train,]
# Input 2
test_X <- cbind(smarket$Lag1,smarket$Lag2)[!train,]
train_Direction <- Direction[!train]
# Input 1
train_X <- cbind(smarket$Lag1,smarket$Lag2)[train,]
# Input 2
test_X <- cbind(smarket$Lag1,smarket$Lag2)[!train,]
train_Direction <- smarket$Direction[!train]
set.seed(1)
knn_pred <- class::knn(train_X,test_X,train_Direction, k = 1)
set.seed(1)
library(class)
knn_pred <- knn(train_X,test_X,train_Direction, k = 1)
nrow(train_X)
nrow(train_Direction)
# Input 1
train_X <- cbind(smarket$Lag1,smarket$Lag2)[train,]
# Input 2
test_X <- cbind(smarket$Lag1,smarket$Lag2)[!train,]
train_Direction <- smarket$Direction[train]
set.seed(1)
library(class)
knn_pred <- knn(train_X,test_X,train_Direction, k = 1)
# Confusion Matrix
table(knn_pred, Direction.2005)
Values6 <- c(round(83/(83 + 58),4)*100, round(43/(43 + 68),4)*100, round(83/(68 + 83),4)*100, round((83 + 43)/nrow(smarket.2005),4)*100)
Metrics4 <- c('Sensitivity','Specificity','Precision','Accuracy')
kableExtra::kable(data.frame(Metrics = Metrics4, Values = Values5))
Values6 <- c(round(83/(83 + 58),4)*100, round(43/(43 + 68),4)*100, round(83/(68 + 83),4)*100, round((83 + 43)/nrow(smarket.2005),4)*100)
Metrics4 <- c('Sensitivity','Specificity','Precision','Accuracy')
kableExtra::kable(data.frame(Metrics = Metrics4, Values = Values6))
set.seed(1)
library(class)
knn_pred1 <- knn(train_X,test_X,train_Direction, k = 3)
# Confusion Matrix
table(knn_pred1, Direction.2005)
Values7 <- c(round(86/(86 + 55),4)*100, round(48/(48 + 63),4)*100, round(86/(63 + 86),4)*100, round((86 + 48)/nrow(smarket.2005),4)*100)
Metrics4 <- c('Sensitivity','Specificity','Precision','Accuracy')
kableExtra::kable(data.frame(Metrics = Metrics4, Values = Values7))
caravan <- Caravan
summary(caravan)
caravan <- Caravan
dim(caravan)
standardized_X <- scale(caravan[,-86])
caravan[86,5]
names(caravan[86,])
standardized_X <- scale(caravan[,-86])
# train-test split
test <- 1:1000
train_X <- standardized_X[!test,]
test_X <- standardized_X[test,]
train_Y <- caravan$Purchase[!test,]
standardized_X <- scale(caravan[,-86])
# train-test split
test <- 1:1000
train_X <- standardized_X[!test,]
test_X <- standardized_X[test,]
train_Y <- caravan$Purchase[!test]
test_Y <- caravan$Purchase[test]
set.seed(1)
knn_pred2 <- knn(train_X2, test_X2, train_Y2, k =1 )
standardized_X <- scale(caravan[,-86])
# train-test split
test <- 1:1000
train_X2 <- standardized_X[!test,]
test_X2 <- standardized_X[test,]
train_Y2 <- caravan$Purchase[!test]
test_Y2 <- caravan$Purchase[test]
set.seed(1)
knn_pred2 <- knn(train_X2, test_X2, train_Y2, k =1 )
set.seed(1)
knn_pred2 <- knn(train_X2, test_X2, train_Y2, k = 1 )
set.seed(1)
knn_pred2 <- knn(train_X2, test_X2, train_Y2, k = 1)
set.seed(1)
knn_pred2 <- knn(train_X2, test_X2, train_Y2, k = 2)
set.seed(1)
knn_pred2 <- knn(train_X2, test_X2, train_Y2, k = 2)
set.seed(1)
knn_pred2 <- knn(train_X2, test_X2, train_Y2, k=1)
dim(train_X)
dim(train_X2)
standardized_X <- scale(caravan[,-86])
# train-test split
test <- 1:1000
train_X2 <- standardized_X[-test,]
test_X2 <- standardized_X[test,]
train_Y2 <- caravan$Purchase[-test]
test_Y2 <- caravan$Purchase[test]
dim(ttrain_X2)
dim(train_X2)
set.seed(1)
knn_pred2 <- knn(train_X2, test_X2, train_Y2, k=1)
#confusion matrix
table(knn_pred2, test_Y2)
Values8 <- c(round(9/(50 + 9),4)*100, round(873/(873 + 68),4)*100, round(9/(68 + 9),4)*100, round((873 + 9)/nrow(test_Y2),4)*100)
kableExtra::kable(data.frame(Metrics = Metrics, Values = Values7))
Values8 <- c(round(9/(50 + 9),4)*100, round(873/(873 + 68),4)*100, round(9/(68 + 9),4)*100, round((873 + 9)/nrow(test_Y2),4)*100)
kableExtra::kable(data.frame(Metrics = Metrics, Values = Values8))
Values8 <- c(round(9/(50 + 9),4)*100, round(873/(873 + 68),4)*100, round(9/(68 + 9),4)*100, round((873 + 9)/nrow(test_Y2),4)*100)
kableExtra::kable(data.frame(Metrics = Metrics, Values = Values8))
Values8 <- c(round(9/(50 + 9),4)*100, round(873/(873 + 68),4)*100, round(9/(68 + 9),4)*100, round((873 + 9)/nrow(test_Y2),4)*100)
kableExtra::kable(data.frame(Metrics = Metrics, Values = Values8))
length(Values8)
Values8 <- c(round(9/(50 + 9),4)*100, round(873/(873 + 68),4)*100, round(9/(68 + 9),4)*100, round((873 + 9)/nrow(test_Y2),4)*100)
kableExtra::kable(data.frame(Metrics = Metrics, Values = Values8))
nrow(test_Y2)
test_Y2
Values8 <- c(round(9/(50 + 9),4)*100, round(873/(873 + 68),4)*100, round(9/(68 + 9),4)*100, round((873 + 9)/length(test_Y2),4)*100)
kableExtra::kable(data.frame(Metrics = Metrics, Values = Values8))
set.seed(1)
library(class)
knn_pred2 <- knn(train_X2,test_X2,train_Y2, k = 3)
# Confusion Matrix
table(knn_pred2, train_Y2)
set.seed(1)
library(class)
knn_pred2 <- knn(train_X2,test_X2,train_Y2, k = 3)
# Confusion Matrix
table(knn_pred2, test_Y2)
Values9 <- c(round(5/(5 + 54),4)*100, round(921/(921 + 20),4)*100, round(5/(54 + 5),4)*100, round((921 + 5)/length(test_Y2),4)*100)
kableExtra::kable(data.frame(Metrics = Metrics, Values = Values9))
Values9 <- c(round(5/(5 + 54),4)*100, round(921/(921 + 20),4)*100, round(5/(20 + 5),4)*100, round((921 + 5)/length(test_Y2),4)*100)
kableExtra::kable(data.frame(Metrics = Metrics, Values = Values9))
set.seed(1)
library(class)
knn_pred3 <- knn(train_X3,test_X3,train_Y3, k = 3)
set.seed(1)
library(class)
knn_pred3 <- knn(train_X2,test_X2,train_Y2, k = 5)
# Confusion Matrix
table(knn_pred3, test_Y2)
Values9 <- c(round(4/(4 + 55),4)*100, round(930/(930 + 11),4)*100, round(4/(4 + 11),4)*100, round((930 + 4)/length(test_Y2),4)*100)
kableExtra::kable(data.frame(Metrics = Metrics, Values = Values9))
glm_fit <- glm(Purchase ~ ., data = caravan, family = binomial, subset = -test)
summary(glm_fit)
glm_fit <- glm(Purchase ~ ., data = caravan, family = binomial, subset = -test)
glm_prob <- predict(glm_fit, caravan[test,], type = 'response')
glm_pred <- rep("No", 1000)
glm_pred[glm_probs > 0.5] = "Yes"
glm_fit <- glm(Purchase ~ ., data = caravan, family = binomial, subset = -test)
glm_prob <- predict(glm_fit, caravan[test,], type = 'response')
glm_pred <- rep("No", 1000)
glm_pred[glm_prob > 0.5] = "Yes"
table(glm_pred, test_Y2)
Values11 <- c(0, round(934/(934 + 7),4)*100, 0, round((934 + 0)/length(test_Y2),4)*100)
kableExtra::kable(data.frame(Metrics = Metrics, Values = Values11))
glm_pred[glm_prob > 0.5] = "Yes"
table(glm_pred, test_Y2)
glm_pred[glm_prob > 0.25] = "Yes"
table(glm_pred, test_Y2)
Values11 <- c(round(11/(11+ 919),4)*100, round(919/(919 + 22),4)*100, round(11/(22 + 11),4)*100, round((919 + 11)/length(test_Y2),4)*100)
kableExtra::kable(data.frame(Metrics = Metrics, Values = Values11))
getwd()
setwd('/home/hrishabh/Desktop/ISLR/Lab/Chapter 5/')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(strip.white = TRUE)
knitr::opts_chunk$set(tidy = TRUE)
library(ISLR)
library(ggplot2)
auto <- Auto
auto <- Auto
kableExtra::kable(auto)
auto <- Auto
kableExtra::kable(head(auto, n = 10))
set.seed(1)
train = sample(392,197)
train
train = sample(392,197)
train
lm.fit <- lm(mpg ~ horsepower, data = auto, subset =  train)
lm.fit
lm.fit <- lm(mpg ~ horsepower, data = auto, subset =  train)
summary(lm.fit)
# predicting for the whole data
pred <- predict(lm.fit,auto)
error <- mean((mpg - pred)[-train]^2)
# predicting for the whole data
pred <- predict(lm.fit,auto)
error <- mean((auto$mpg - pred)[-train]^2)
paste("The mean squared error is",error)
lm.fit2 <- lm(mpg ~ poly(horsepower,2), data = auto, subset = train)
pred2 <- predict(lm.fit2, auto)
error2 <- mean((auto$mpg - pred)[-train]^2)
paste("The mean squared error is",error2)
lm.fit2 <- lm(mpg ~ poly(horsepower,2), data = auto, subset = train)
pred2 <- predict(lm.fit2, auto)
error2 <- mean((auto$mpg - pred2)[-train]^2)
paste("The mean squared error is",error2)
lm.fit2 <- lm(mpg ~ poly(horsepower,2), data = auto, subset = train)
pred2 <- predict(lm.fit2, auto)
error2 <- mean((auto$mpg - pred2)[-train]^2)
paste("The mean squared error for quadratic model is",error2)
lm.fit3 <- lm(mpg ~ poly(horsepower,3), data = auto, subset = train)
pred3 <- predict(lm.fit3, auto)
error3 <- mean((auto$mpg - pred3)[-train]^2)
paste("The mean squared error for cubic model is",error3)
0:3
for i in 0:3
summary(lm(mpg ~ poly(horsepower,0), data = auto))
set.seed(2)
train <- sample(392,196)
error <- list()
for(i in 1:2){
temp_fit <- lm(mpg ~ poly(horsepower,i), data = auto, subset = train)
error[i] <- mean((auto$mpg - predict(temp_fit, auto))[-train]^2)
}
kableExtra::kable(data.frame(Order = c(1,2), error))
set.seed(2)
train <- sample(392,196)
error <- vector()
for(i in 1:2){
temp_fit <- lm(mpg ~ poly(horsepower,i), data = auto, subset = train)
error[i] <- mean((auto$mpg - predict(temp_fit, auto))[-train]^2)
}
kableExtra::kable(data.frame(Order = c(1,2), error))
install.packages(boot)
install.packages('boot')
library(ISLR)
library(ggplot2)
library(boot)
glm.fit <- glm(mpg ~ horsepower, data = Auto)
cv.err <- cv.glm(auto, glm.fit)
cv.err$delta
cv.error <- vector()
for (i in 1:5){
glm.fit <- glm(mpg ~ poly(horsepower,i), data = auto)
cv.error[i] <- cv.glm(Auto,glm.fit)$delta[1]
}
ggplot(data.frame(Order = 1:5, test_error = cv.error),
aes(x = Order, y = test_error)) +
geom_line()
cv.error <- vector()
for (i in 1:5){
glm.fit <- glm(mpg ~ poly(horsepower,i), data = auto)
cv.error[i] <- cv.glm(Auto,glm.fit)$delta[1]
}
ggplot(data.frame(Order = 1:5, test_error = cv.error),
aes(x = Order, y = test_error)) +
geom_line() +
ylab("Test Error") +
xlab("Polynomial Order")
set.seed(17)
cv.error.10 <- vector()
for (i in 1:10){
glm.fit <- glm(mpg ~ poly(horsepower,i), data = auto)
cv.error.10[i] <- cv.glm(glm.fit,auto, K =10)$delta[1]
}
set.seed(17)
cv.error.10 <- vector()
for (i in 1:10){
glm.fit <- glm(mpg ~ poly(horsepower,i), data = auto)
cv.error.10[i] <- cv.glm(auto,glm.fit, K = 10)$delta[1]
}
ggplot(data.frame(Order = 1:10, test_error = cv.error.10),
aes(x = Order, y = test_error)) +
geom_line() +
ylab("Test Error") +
xlab("Polynomial Order")
set.seed(17)
cv.error.10 <- vector()
for (i in 1:10){
glm.fit <- glm(mpg ~ poly(horsepower,i), data = auto)
cv.error.10[i] <- cv.glm(auto,glm.fit, K = 10)$delta[1]
}
ggplot(data.frame(Order = 1:10, test_error = cv.error.10),
aes(x = Order, y = test_error)) +
geom_line() +
ylab("Test Error") +
xlab("Polynomial Order") +
scale_x_continuous(limit = c(1,10), breaks = c(1,2,3,4,5,6,7,8,9,10))
boot(Portfolio,alpha.fn, R = 1000)
alpha.fn <- function(data,index){
X <- data[index]
Y <- data[index]
return((var(Y)-cov(X,Y))/(var(X) + var(Y) - 2*cov(X,Y)))
}
boot(Portfolio,alpha.fn, R = 1000)
portfolio <- Portfolio
boot(portfolio, alpha.fn, R = 1000)
View(portfolio)
alpha.fn <- function(data,index){
X <- data$X[index]
Y <- data$Y[index]
return((var(Y)-cov(X,Y))/(var(X) + var(Y) - 2*cov(X,Y)))
}
portfolio <- Portfolio
boot(portfolio, alpha.fn, R = 1000)
set.seed(1)
boot(auto,boot.fn, R = 1000)
boot.fn <- function(data,index){
return(coeff(lm(mpg ~ horsepower, data = data, subset = index)))
}
set.seed(1)
boot(auto,boot.fn, R = 1000)
boot.fn <- function(data,index){
return(coef(lm(mpg ~ horsepower, data = data, subset = index)))
}
set.seed(1)
boot(auto,boot.fn, R = 1000)
summary(lm(mpg ~ horsepower, data = auto))$coef
boot.fn2 <- function(data,index){
return(coef(lm(mpg ~ horsepower + I(horsepower^2),
data = auto,
subset = index)))
}
boot(auto,boot.fn2,R = 1000)
summary(lm(mpg ~ horsepower + I(horsepower ^2 ), data = auto))$coef
